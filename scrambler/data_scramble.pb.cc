// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_scramble.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data_scramble.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data_scrabmle {

namespace {

const ::google::protobuf::Descriptor* frame_scramble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  frame_scramble_reflection_ = NULL;
const ::google::protobuf::Descriptor* field_scramble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  field_scramble_reflection_ = NULL;
const ::google::protobuf::Descriptor* content_scramble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  content_scramble_reflection_ = NULL;
const ::google::protobuf::Descriptor* scramble_command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scramble_command_reflection_ = NULL;
const ::google::protobuf::Descriptor* frame_output_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  frame_output_reflection_ = NULL;
const ::google::protobuf::Descriptor* field_additions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  field_additions_reflection_ = NULL;
const ::google::protobuf::Descriptor* field_output_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  field_output_reflection_ = NULL;
const ::google::protobuf::Descriptor* content_output_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  content_output_reflection_ = NULL;
const ::google::protobuf::Descriptor* scramble_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scramble_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* html_element_action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  html_element_action_reflection_ = NULL;
const ::google::protobuf::Descriptor* html_element_action_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  html_element_action_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* html_element_action_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  html_element_action_request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* scramble_mode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_5fscramble_2eproto() {
  protobuf_AddDesc_data_5fscramble_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data_scramble.proto");
  GOOGLE_CHECK(file != NULL);
  frame_scramble_descriptor_ = file->message_type(0);
  static const int frame_scramble_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_scramble, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_scramble, links_xpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_scramble, next_xpath_),
  };
  frame_scramble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      frame_scramble_descriptor_,
      frame_scramble::default_instance_,
      frame_scramble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_scramble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_scramble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(frame_scramble));
  field_scramble_descriptor_ = file->message_type(1);
  static const int field_scramble_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_scramble, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_scramble, xpath_),
  };
  field_scramble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      field_scramble_descriptor_,
      field_scramble::default_instance_,
      field_scramble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_scramble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_scramble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(field_scramble));
  content_scramble_descriptor_ = file->message_type(2);
  static const int content_scramble_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_scramble, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_scramble, fields_),
  };
  content_scramble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      content_scramble_descriptor_,
      content_scramble::default_instance_,
      content_scramble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_scramble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_scramble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(content_scramble));
  scramble_command_descriptor_ = file->message_type(3);
  static const int scramble_command_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_command, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_command, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_command, content_),
  };
  scramble_command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scramble_command_descriptor_,
      scramble_command::default_instance_,
      scramble_command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scramble_command));
  frame_output_descriptor_ = file->message_type(4);
  static const int frame_output_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_output, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_output, next_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_output, link_),
  };
  frame_output_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      frame_output_descriptor_,
      frame_output::default_instance_,
      frame_output_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_output, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(frame_output, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(frame_output));
  field_additions_descriptor_ = file->message_type(5);
  static const int field_additions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_additions, addition_),
  };
  field_additions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      field_additions_descriptor_,
      field_additions::default_instance_,
      field_additions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_additions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_additions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(field_additions));
  field_output_descriptor_ = file->message_type(6);
  static const int field_output_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_output, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_output, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_output, additions_),
  };
  field_output_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      field_output_descriptor_,
      field_output::default_instance_,
      field_output_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_output, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_output, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(field_output));
  content_output_descriptor_ = file->message_type(7);
  static const int content_output_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_output, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_output, content_),
  };
  content_output_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      content_output_descriptor_,
      content_output::default_instance_,
      content_output_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_output, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(content_output, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(content_output));
  scramble_response_descriptor_ = file->message_type(8);
  static const int scramble_response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_response, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_response, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_response, content_),
  };
  scramble_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scramble_response_descriptor_,
      scramble_response::default_instance_,
      scramble_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scramble_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scramble_response));
  html_element_action_descriptor_ = file->message_type(9);
  static const int html_element_action_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action, xpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action, input_),
  };
  html_element_action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      html_element_action_descriptor_,
      html_element_action::default_instance_,
      html_element_action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(html_element_action));
  html_element_action_response_descriptor_ = file->message_type(10);
  static const int html_element_action_response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action_response, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action_response, response_),
  };
  html_element_action_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      html_element_action_response_descriptor_,
      html_element_action_response::default_instance_,
      html_element_action_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(html_element_action_response));
  html_element_action_request_descriptor_ = file->message_type(11);
  static const int html_element_action_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action_request, request_),
  };
  html_element_action_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      html_element_action_request_descriptor_,
      html_element_action_request::default_instance_,
      html_element_action_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(html_element_action_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(html_element_action_request));
  scramble_mode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_5fscramble_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    frame_scramble_descriptor_, &frame_scramble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    field_scramble_descriptor_, &field_scramble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    content_scramble_descriptor_, &content_scramble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scramble_command_descriptor_, &scramble_command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    frame_output_descriptor_, &frame_output::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    field_additions_descriptor_, &field_additions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    field_output_descriptor_, &field_output::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    content_output_descriptor_, &content_output::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scramble_response_descriptor_, &scramble_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    html_element_action_descriptor_, &html_element_action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    html_element_action_response_descriptor_, &html_element_action_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    html_element_action_request_descriptor_, &html_element_action_request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_5fscramble_2eproto() {
  delete frame_scramble::default_instance_;
  delete frame_scramble_reflection_;
  delete field_scramble::default_instance_;
  delete field_scramble_reflection_;
  delete content_scramble::default_instance_;
  delete content_scramble_reflection_;
  delete scramble_command::default_instance_;
  delete scramble_command_reflection_;
  delete frame_output::default_instance_;
  delete frame_output_reflection_;
  delete field_additions::default_instance_;
  delete field_additions_reflection_;
  delete field_output::default_instance_;
  delete field_output_reflection_;
  delete content_output::default_instance_;
  delete content_output_reflection_;
  delete scramble_response::default_instance_;
  delete scramble_response_reflection_;
  delete html_element_action::default_instance_;
  delete html_element_action_reflection_;
  delete html_element_action_response::default_instance_;
  delete html_element_action_response_reflection_;
  delete html_element_action_request::default_instance_;
  delete html_element_action_request_reflection_;
}

void protobuf_AddDesc_data_5fscramble_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023data_scramble.proto\022\rdata_scrabmle\"F\n\016"
    "frame_scramble\022\013\n\003url\030\001 \002(\t\022\023\n\013links_xpa"
    "th\030\002 \002(\t\022\022\n\nnext_xpath\030\003 \002(\t\"-\n\016field_sc"
    "ramble\022\014\n\004name\030\001 \002(\t\022\r\n\005xpath\030\002 \002(\t\"N\n\020c"
    "ontent_scramble\022\013\n\003url\030\002 \002(\t\022-\n\006fields\030\003"
    " \003(\0132\035.data_scrabmle.field_scramble\"\267\001\n\020"
    "scramble_command\022C\n\004mode\030\001 \002(\0162\034.data_sc"
    "rabmle.scramble_mode:\027FRAME_WEB_PAGE_SCR"
    "AMBLE\022,\n\005frame\030\002 \001(\0132\035.data_scrabmle.fra"
    "me_scramble\0220\n\007content\030\003 \001(\0132\037.data_scra"
    "bmle.content_scramble\"<\n\014frame_output\022\013\n"
    "\003url\030\001 \002(\t\022\021\n\tnext_link\030\002 \002(\t\022\014\n\004link\030\003 "
    "\003(\t\"#\n\017field_additions\022\020\n\010addition\030\001 \003(\t"
    "\"\?\n\014field_output\022\014\n\004name\030\001 \002(\t\022\016\n\006output"
    "\030\002 \002(\t\022\021\n\tadditions\030\003 \003(\t\"K\n\016content_out"
    "put\022\013\n\003url\030\001 \002(\t\022,\n\007content\030\002 \003(\0132\033.data"
    "_scrabmle.field_output\"\264\001\n\021scramble_resp"
    "onse\022C\n\004mode\030\001 \002(\0162\034.data_scrabmle.scram"
    "ble_mode:\027FRAME_WEB_PAGE_SCRAMBLE\022*\n\005fra"
    "me\030\002 \001(\0132\033.data_scrabmle.frame_output\022.\n"
    "\007content\030\003 \001(\0132\035.data_scrabmle.content_o"
    "utput\"k\n\023html_element_action\022\n\n\002id\030\001 \002(\t"
    "\022\016\n\006action\030\002 \002(\t\022\r\n\005xpath\030\003 \002(\t\022\r\n\005param"
    "\030\004 \002(\t\022\013\n\003url\030\005 \002(\t\022\r\n\005input\030\006 \001(\t\"<\n\034ht"
    "ml_element_action_response\022\n\n\002id\030\001 \002(\t\022\020"
    "\n\010response\030\002 \003(\t\".\n\033html_element_action_"
    "request\022\017\n\007request\030\001 \002(\t*i\n\rscramble_mod"
    "e\022\033\n\027FRAME_WEB_PAGE_SCRAMBLE\020\000\022\035\n\031CONTEN"
    "T_WEB_PAGE_SCRAMBLE\020\001\022\034\n\030CONTENT_WEB_PAG"
    "E_HILIGHT\020\002", 1171);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data_scramble.proto", &protobuf_RegisterTypes);
  frame_scramble::default_instance_ = new frame_scramble();
  field_scramble::default_instance_ = new field_scramble();
  content_scramble::default_instance_ = new content_scramble();
  scramble_command::default_instance_ = new scramble_command();
  frame_output::default_instance_ = new frame_output();
  field_additions::default_instance_ = new field_additions();
  field_output::default_instance_ = new field_output();
  content_output::default_instance_ = new content_output();
  scramble_response::default_instance_ = new scramble_response();
  html_element_action::default_instance_ = new html_element_action();
  html_element_action_response::default_instance_ = new html_element_action_response();
  html_element_action_request::default_instance_ = new html_element_action_request();
  frame_scramble::default_instance_->InitAsDefaultInstance();
  field_scramble::default_instance_->InitAsDefaultInstance();
  content_scramble::default_instance_->InitAsDefaultInstance();
  scramble_command::default_instance_->InitAsDefaultInstance();
  frame_output::default_instance_->InitAsDefaultInstance();
  field_additions::default_instance_->InitAsDefaultInstance();
  field_output::default_instance_->InitAsDefaultInstance();
  content_output::default_instance_->InitAsDefaultInstance();
  scramble_response::default_instance_->InitAsDefaultInstance();
  html_element_action::default_instance_->InitAsDefaultInstance();
  html_element_action_response::default_instance_->InitAsDefaultInstance();
  html_element_action_request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_5fscramble_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_5fscramble_2eproto {
  StaticDescriptorInitializer_data_5fscramble_2eproto() {
    protobuf_AddDesc_data_5fscramble_2eproto();
  }
} static_descriptor_initializer_data_5fscramble_2eproto_;
const ::google::protobuf::EnumDescriptor* scramble_mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scramble_mode_descriptor_;
}
bool scramble_mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int frame_scramble::kUrlFieldNumber;
const int frame_scramble::kLinksXpathFieldNumber;
const int frame_scramble::kNextXpathFieldNumber;
#endif  // !_MSC_VER

frame_scramble::frame_scramble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void frame_scramble::InitAsDefaultInstance() {
}

frame_scramble::frame_scramble(const frame_scramble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void frame_scramble::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  links_xpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_xpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

frame_scramble::~frame_scramble() {
  SharedDtor();
}

void frame_scramble::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (links_xpath_ != &::google::protobuf::internal::kEmptyString) {
    delete links_xpath_;
  }
  if (next_xpath_ != &::google::protobuf::internal::kEmptyString) {
    delete next_xpath_;
  }
  if (this != default_instance_) {
  }
}

void frame_scramble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* frame_scramble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return frame_scramble_descriptor_;
}

const frame_scramble& frame_scramble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

frame_scramble* frame_scramble::default_instance_ = NULL;

frame_scramble* frame_scramble::New() const {
  return new frame_scramble;
}

void frame_scramble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_links_xpath()) {
      if (links_xpath_ != &::google::protobuf::internal::kEmptyString) {
        links_xpath_->clear();
      }
    }
    if (has_next_xpath()) {
      if (next_xpath_ != &::google::protobuf::internal::kEmptyString) {
        next_xpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool frame_scramble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_links_xpath;
        break;
      }

      // required string links_xpath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_links_xpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_links_xpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->links_xpath().data(), this->links_xpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_next_xpath;
        break;
      }

      // required string next_xpath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_xpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_xpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->next_xpath().data(), this->next_xpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void frame_scramble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // required string links_xpath = 2;
  if (has_links_xpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->links_xpath().data(), this->links_xpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->links_xpath(), output);
  }

  // required string next_xpath = 3;
  if (has_next_xpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->next_xpath().data(), this->next_xpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->next_xpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* frame_scramble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required string links_xpath = 2;
  if (has_links_xpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->links_xpath().data(), this->links_xpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->links_xpath(), target);
  }

  // required string next_xpath = 3;
  if (has_next_xpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->next_xpath().data(), this->next_xpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_xpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int frame_scramble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // required string links_xpath = 2;
    if (has_links_xpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->links_xpath());
    }

    // required string next_xpath = 3;
    if (has_next_xpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_xpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void frame_scramble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const frame_scramble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const frame_scramble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void frame_scramble::MergeFrom(const frame_scramble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_links_xpath()) {
      set_links_xpath(from.links_xpath());
    }
    if (from.has_next_xpath()) {
      set_next_xpath(from.next_xpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void frame_scramble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void frame_scramble::CopyFrom(const frame_scramble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool frame_scramble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void frame_scramble::Swap(frame_scramble* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(links_xpath_, other->links_xpath_);
    std::swap(next_xpath_, other->next_xpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata frame_scramble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = frame_scramble_descriptor_;
  metadata.reflection = frame_scramble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int field_scramble::kNameFieldNumber;
const int field_scramble::kXpathFieldNumber;
#endif  // !_MSC_VER

field_scramble::field_scramble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void field_scramble::InitAsDefaultInstance() {
}

field_scramble::field_scramble(const field_scramble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void field_scramble::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

field_scramble::~field_scramble() {
  SharedDtor();
}

void field_scramble::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (xpath_ != &::google::protobuf::internal::kEmptyString) {
    delete xpath_;
  }
  if (this != default_instance_) {
  }
}

void field_scramble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* field_scramble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return field_scramble_descriptor_;
}

const field_scramble& field_scramble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

field_scramble* field_scramble::default_instance_ = NULL;

field_scramble* field_scramble::New() const {
  return new field_scramble;
}

void field_scramble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_xpath()) {
      if (xpath_ != &::google::protobuf::internal::kEmptyString) {
        xpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool field_scramble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xpath;
        break;
      }

      // required string xpath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xpath().data(), this->xpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void field_scramble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string xpath = 2;
  if (has_xpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xpath().data(), this->xpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->xpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* field_scramble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string xpath = 2;
  if (has_xpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xpath().data(), this->xpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int field_scramble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string xpath = 2;
    if (has_xpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void field_scramble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const field_scramble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const field_scramble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void field_scramble::MergeFrom(const field_scramble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_xpath()) {
      set_xpath(from.xpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void field_scramble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void field_scramble::CopyFrom(const field_scramble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_scramble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void field_scramble::Swap(field_scramble* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(xpath_, other->xpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata field_scramble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = field_scramble_descriptor_;
  metadata.reflection = field_scramble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int content_scramble::kUrlFieldNumber;
const int content_scramble::kFieldsFieldNumber;
#endif  // !_MSC_VER

content_scramble::content_scramble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void content_scramble::InitAsDefaultInstance() {
}

content_scramble::content_scramble(const content_scramble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void content_scramble::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

content_scramble::~content_scramble() {
  SharedDtor();
}

void content_scramble::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void content_scramble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* content_scramble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return content_scramble_descriptor_;
}

const content_scramble& content_scramble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

content_scramble* content_scramble::default_instance_ = NULL;

content_scramble* content_scramble::New() const {
  return new content_scramble;
}

void content_scramble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool content_scramble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        break;
      }

      // repeated .data_scrabmle.field_scramble fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void content_scramble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

  // repeated .data_scrabmle.field_scramble fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* content_scramble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // repeated .data_scrabmle.field_scramble fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int content_scramble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  // repeated .data_scrabmle.field_scramble fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void content_scramble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const content_scramble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const content_scramble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void content_scramble::MergeFrom(const content_scramble& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void content_scramble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void content_scramble::CopyFrom(const content_scramble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool content_scramble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fields_size(); i++) {
    if (!this->fields(i).IsInitialized()) return false;
  }
  return true;
}

void content_scramble::Swap(content_scramble* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    fields_.Swap(&other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata content_scramble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = content_scramble_descriptor_;
  metadata.reflection = content_scramble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scramble_command::kModeFieldNumber;
const int scramble_command::kFrameFieldNumber;
const int scramble_command::kContentFieldNumber;
#endif  // !_MSC_VER

scramble_command::scramble_command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void scramble_command::InitAsDefaultInstance() {
  frame_ = const_cast< ::data_scrabmle::frame_scramble*>(&::data_scrabmle::frame_scramble::default_instance());
  content_ = const_cast< ::data_scrabmle::content_scramble*>(&::data_scrabmle::content_scramble::default_instance());
}

scramble_command::scramble_command(const scramble_command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void scramble_command::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  frame_ = NULL;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scramble_command::~scramble_command() {
  SharedDtor();
}

void scramble_command::SharedDtor() {
  if (this != default_instance_) {
    delete frame_;
    delete content_;
  }
}

void scramble_command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scramble_command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scramble_command_descriptor_;
}

const scramble_command& scramble_command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

scramble_command* scramble_command::default_instance_ = NULL;

scramble_command* scramble_command::New() const {
  return new scramble_command;
}

void scramble_command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    if (has_frame()) {
      if (frame_ != NULL) frame_->::data_scrabmle::frame_scramble::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::data_scrabmle::content_scramble::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scramble_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .data_scrabmle.scramble_mode mode = 1 [default = FRAME_WEB_PAGE_SCRAMBLE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data_scrabmle::scramble_mode_IsValid(value)) {
            set_mode(static_cast< ::data_scrabmle::scramble_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frame;
        break;
      }

      // optional .data_scrabmle.frame_scramble frame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional .data_scrabmle.content_scramble content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void scramble_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .data_scrabmle.scramble_mode mode = 1 [default = FRAME_WEB_PAGE_SCRAMBLE];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional .data_scrabmle.frame_scramble frame = 2;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frame(), output);
  }

  // optional .data_scrabmle.content_scramble content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* scramble_command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .data_scrabmle.scramble_mode mode = 1 [default = FRAME_WEB_PAGE_SCRAMBLE];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional .data_scrabmle.frame_scramble frame = 2;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frame(), target);
  }

  // optional .data_scrabmle.content_scramble content = 3;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int scramble_command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .data_scrabmle.scramble_mode mode = 1 [default = FRAME_WEB_PAGE_SCRAMBLE];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .data_scrabmle.frame_scramble frame = 2;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame());
    }

    // optional .data_scrabmle.content_scramble content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scramble_command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scramble_command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scramble_command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scramble_command::MergeFrom(const scramble_command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_frame()) {
      mutable_frame()->::data_scrabmle::frame_scramble::MergeFrom(from.frame());
    }
    if (from.has_content()) {
      mutable_content()->::data_scrabmle::content_scramble::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scramble_command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scramble_command::CopyFrom(const scramble_command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scramble_command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_frame()) {
    if (!this->frame().IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void scramble_command::Swap(scramble_command* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(frame_, other->frame_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scramble_command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scramble_command_descriptor_;
  metadata.reflection = scramble_command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int frame_output::kUrlFieldNumber;
const int frame_output::kNextLinkFieldNumber;
const int frame_output::kLinkFieldNumber;
#endif  // !_MSC_VER

frame_output::frame_output()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void frame_output::InitAsDefaultInstance() {
}

frame_output::frame_output(const frame_output& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void frame_output::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

frame_output::~frame_output() {
  SharedDtor();
}

void frame_output::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (next_link_ != &::google::protobuf::internal::kEmptyString) {
    delete next_link_;
  }
  if (this != default_instance_) {
  }
}

void frame_output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* frame_output::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return frame_output_descriptor_;
}

const frame_output& frame_output::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

frame_output* frame_output::default_instance_ = NULL;

frame_output* frame_output::New() const {
  return new frame_output;
}

void frame_output::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_next_link()) {
      if (next_link_ != &::google::protobuf::internal::kEmptyString) {
        next_link_->clear();
      }
    }
  }
  link_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool frame_output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_next_link;
        break;
      }

      // required string next_link = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->next_link().data(), this->next_link().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_link;
        break;
      }

      // repeated string link = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link(this->link_size() - 1).data(),
            this->link(this->link_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_link;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void frame_output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // required string next_link = 2;
  if (has_next_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->next_link().data(), this->next_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->next_link(), output);
  }

  // repeated string link = 3;
  for (int i = 0; i < this->link_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->link(i).data(), this->link(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->link(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* frame_output::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required string next_link = 2;
  if (has_next_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->next_link().data(), this->next_link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_link(), target);
  }

  // repeated string link = 3;
  for (int i = 0; i < this->link_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link(i).data(), this->link(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->link(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int frame_output::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // required string next_link = 2;
    if (has_next_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_link());
    }

  }
  // repeated string link = 3;
  total_size += 1 * this->link_size();
  for (int i = 0; i < this->link_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->link(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void frame_output::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const frame_output* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const frame_output*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void frame_output::MergeFrom(const frame_output& from) {
  GOOGLE_CHECK_NE(&from, this);
  link_.MergeFrom(from.link_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_next_link()) {
      set_next_link(from.next_link());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void frame_output::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void frame_output::CopyFrom(const frame_output& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool frame_output::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void frame_output::Swap(frame_output* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(next_link_, other->next_link_);
    link_.Swap(&other->link_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata frame_output::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = frame_output_descriptor_;
  metadata.reflection = frame_output_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int field_additions::kAdditionFieldNumber;
#endif  // !_MSC_VER

field_additions::field_additions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void field_additions::InitAsDefaultInstance() {
}

field_additions::field_additions(const field_additions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void field_additions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

field_additions::~field_additions() {
  SharedDtor();
}

void field_additions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void field_additions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* field_additions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return field_additions_descriptor_;
}

const field_additions& field_additions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

field_additions* field_additions::default_instance_ = NULL;

field_additions* field_additions::New() const {
  return new field_additions;
}

void field_additions::Clear() {
  addition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool field_additions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string addition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_addition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addition(this->addition_size() - 1).data(),
            this->addition(this->addition_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_addition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void field_additions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string addition = 1;
  for (int i = 0; i < this->addition_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->addition(i).data(), this->addition(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->addition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* field_additions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string addition = 1;
  for (int i = 0; i < this->addition_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addition(i).data(), this->addition(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->addition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int field_additions::ByteSize() const {
  int total_size = 0;

  // repeated string addition = 1;
  total_size += 1 * this->addition_size();
  for (int i = 0; i < this->addition_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->addition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void field_additions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const field_additions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const field_additions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void field_additions::MergeFrom(const field_additions& from) {
  GOOGLE_CHECK_NE(&from, this);
  addition_.MergeFrom(from.addition_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void field_additions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void field_additions::CopyFrom(const field_additions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_additions::IsInitialized() const {

  return true;
}

void field_additions::Swap(field_additions* other) {
  if (other != this) {
    addition_.Swap(&other->addition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata field_additions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = field_additions_descriptor_;
  metadata.reflection = field_additions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int field_output::kNameFieldNumber;
const int field_output::kOutputFieldNumber;
const int field_output::kAdditionsFieldNumber;
#endif  // !_MSC_VER

field_output::field_output()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void field_output::InitAsDefaultInstance() {
}

field_output::field_output(const field_output& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void field_output::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

field_output::~field_output() {
  SharedDtor();
}

void field_output::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    delete output_;
  }
  if (this != default_instance_) {
  }
}

void field_output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* field_output::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return field_output_descriptor_;
}

const field_output& field_output::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

field_output* field_output::default_instance_ = NULL;

field_output* field_output::New() const {
  return new field_output;
}

void field_output::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_output()) {
      if (output_ != &::google::protobuf::internal::kEmptyString) {
        output_->clear();
      }
    }
  }
  additions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool field_output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // required string output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output().data(), this->output().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_additions;
        break;
      }

      // repeated string additions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_additions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->additions(this->additions_size() - 1).data(),
            this->additions(this->additions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_additions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void field_output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->output(), output);
  }

  // repeated string additions = 3;
  for (int i = 0; i < this->additions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->additions(i).data(), this->additions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->additions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* field_output::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  // repeated string additions = 3;
  for (int i = 0; i < this->additions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additions(i).data(), this->additions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->additions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int field_output::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string output = 2;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output());
    }

  }
  // repeated string additions = 3;
  total_size += 1 * this->additions_size();
  for (int i = 0; i < this->additions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->additions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void field_output::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const field_output* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const field_output*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void field_output::MergeFrom(const field_output& from) {
  GOOGLE_CHECK_NE(&from, this);
  additions_.MergeFrom(from.additions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_output()) {
      set_output(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void field_output::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void field_output::CopyFrom(const field_output& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_output::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void field_output::Swap(field_output* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(output_, other->output_);
    additions_.Swap(&other->additions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata field_output::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = field_output_descriptor_;
  metadata.reflection = field_output_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int content_output::kUrlFieldNumber;
const int content_output::kContentFieldNumber;
#endif  // !_MSC_VER

content_output::content_output()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void content_output::InitAsDefaultInstance() {
}

content_output::content_output(const content_output& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void content_output::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

content_output::~content_output() {
  SharedDtor();
}

void content_output::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void content_output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* content_output::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return content_output_descriptor_;
}

const content_output& content_output::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

content_output* content_output::default_instance_ = NULL;

content_output* content_output::New() const {
  return new content_output;
}

void content_output::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool content_output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // repeated .data_scrabmle.field_output content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void content_output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // repeated .data_scrabmle.field_output content = 2;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* content_output::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated .data_scrabmle.field_output content = 2;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int content_output::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  // repeated .data_scrabmle.field_output content = 2;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void content_output::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const content_output* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const content_output*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void content_output::MergeFrom(const content_output& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void content_output::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void content_output::CopyFrom(const content_output& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool content_output::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < content_size(); i++) {
    if (!this->content(i).IsInitialized()) return false;
  }
  return true;
}

void content_output::Swap(content_output* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata content_output::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = content_output_descriptor_;
  metadata.reflection = content_output_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scramble_response::kModeFieldNumber;
const int scramble_response::kFrameFieldNumber;
const int scramble_response::kContentFieldNumber;
#endif  // !_MSC_VER

scramble_response::scramble_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void scramble_response::InitAsDefaultInstance() {
  frame_ = const_cast< ::data_scrabmle::frame_output*>(&::data_scrabmle::frame_output::default_instance());
  content_ = const_cast< ::data_scrabmle::content_output*>(&::data_scrabmle::content_output::default_instance());
}

scramble_response::scramble_response(const scramble_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void scramble_response::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  frame_ = NULL;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scramble_response::~scramble_response() {
  SharedDtor();
}

void scramble_response::SharedDtor() {
  if (this != default_instance_) {
    delete frame_;
    delete content_;
  }
}

void scramble_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scramble_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scramble_response_descriptor_;
}

const scramble_response& scramble_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

scramble_response* scramble_response::default_instance_ = NULL;

scramble_response* scramble_response::New() const {
  return new scramble_response;
}

void scramble_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    if (has_frame()) {
      if (frame_ != NULL) frame_->::data_scrabmle::frame_output::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::data_scrabmle::content_output::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scramble_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .data_scrabmle.scramble_mode mode = 1 [default = FRAME_WEB_PAGE_SCRAMBLE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data_scrabmle::scramble_mode_IsValid(value)) {
            set_mode(static_cast< ::data_scrabmle::scramble_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frame;
        break;
      }

      // optional .data_scrabmle.frame_output frame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional .data_scrabmle.content_output content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void scramble_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .data_scrabmle.scramble_mode mode = 1 [default = FRAME_WEB_PAGE_SCRAMBLE];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional .data_scrabmle.frame_output frame = 2;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frame(), output);
  }

  // optional .data_scrabmle.content_output content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* scramble_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .data_scrabmle.scramble_mode mode = 1 [default = FRAME_WEB_PAGE_SCRAMBLE];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional .data_scrabmle.frame_output frame = 2;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frame(), target);
  }

  // optional .data_scrabmle.content_output content = 3;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int scramble_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .data_scrabmle.scramble_mode mode = 1 [default = FRAME_WEB_PAGE_SCRAMBLE];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .data_scrabmle.frame_output frame = 2;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame());
    }

    // optional .data_scrabmle.content_output content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scramble_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scramble_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scramble_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scramble_response::MergeFrom(const scramble_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_frame()) {
      mutable_frame()->::data_scrabmle::frame_output::MergeFrom(from.frame());
    }
    if (from.has_content()) {
      mutable_content()->::data_scrabmle::content_output::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scramble_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scramble_response::CopyFrom(const scramble_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scramble_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_frame()) {
    if (!this->frame().IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void scramble_response::Swap(scramble_response* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(frame_, other->frame_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scramble_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scramble_response_descriptor_;
  metadata.reflection = scramble_response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int html_element_action::kIdFieldNumber;
const int html_element_action::kActionFieldNumber;
const int html_element_action::kXpathFieldNumber;
const int html_element_action::kParamFieldNumber;
const int html_element_action::kUrlFieldNumber;
const int html_element_action::kInputFieldNumber;
#endif  // !_MSC_VER

html_element_action::html_element_action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void html_element_action::InitAsDefaultInstance() {
}

html_element_action::html_element_action(const html_element_action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void html_element_action::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

html_element_action::~html_element_action() {
  SharedDtor();
}

void html_element_action::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (xpath_ != &::google::protobuf::internal::kEmptyString) {
    delete xpath_;
  }
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (this != default_instance_) {
  }
}

void html_element_action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* html_element_action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return html_element_action_descriptor_;
}

const html_element_action& html_element_action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

html_element_action* html_element_action::default_instance_ = NULL;

html_element_action* html_element_action::New() const {
  return new html_element_action;
}

void html_element_action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::kEmptyString) {
        action_->clear();
      }
    }
    if (has_xpath()) {
      if (xpath_ != &::google::protobuf::internal::kEmptyString) {
        xpath_->clear();
      }
    }
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_input()) {
      if (input_ != &::google::protobuf::internal::kEmptyString) {
        input_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool html_element_action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_action;
        break;
      }

      // required string action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_xpath;
        break;
      }

      // required string xpath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xpath().data(), this->xpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param;
        break;
      }

      // required string param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // required string url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_input;
        break;
      }

      // optional string input = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input().data(), this->input().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void html_element_action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->action(), output);
  }

  // required string xpath = 3;
  if (has_xpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xpath().data(), this->xpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->xpath(), output);
  }

  // required string param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->param(), output);
  }

  // required string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url(), output);
  }

  // optional string input = 6;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->input(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* html_element_action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->action(), target);
  }

  // required string xpath = 3;
  if (has_xpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xpath().data(), this->xpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->xpath(), target);
  }

  // required string param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param(), target);
  }

  // required string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // optional string input = 6;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->input(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int html_element_action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // required string xpath = 3;
    if (has_xpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xpath());
    }

    // required string param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

    // required string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string input = 6;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void html_element_action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const html_element_action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const html_element_action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void html_element_action::MergeFrom(const html_element_action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_xpath()) {
      set_xpath(from.xpath());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_input()) {
      set_input(from.input());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void html_element_action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void html_element_action::CopyFrom(const html_element_action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool html_element_action::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void html_element_action::Swap(html_element_action* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(action_, other->action_);
    std::swap(xpath_, other->xpath_);
    std::swap(param_, other->param_);
    std::swap(url_, other->url_);
    std::swap(input_, other->input_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata html_element_action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = html_element_action_descriptor_;
  metadata.reflection = html_element_action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int html_element_action_response::kIdFieldNumber;
const int html_element_action_response::kResponseFieldNumber;
#endif  // !_MSC_VER

html_element_action_response::html_element_action_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void html_element_action_response::InitAsDefaultInstance() {
}

html_element_action_response::html_element_action_response(const html_element_action_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void html_element_action_response::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

html_element_action_response::~html_element_action_response() {
  SharedDtor();
}

void html_element_action_response::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void html_element_action_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* html_element_action_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return html_element_action_response_descriptor_;
}

const html_element_action_response& html_element_action_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

html_element_action_response* html_element_action_response::default_instance_ = NULL;

html_element_action_response* html_element_action_response::New() const {
  return new html_element_action_response;
}

void html_element_action_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  response_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool html_element_action_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // repeated string response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response(this->response_size() - 1).data(),
            this->response(this->response_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void html_element_action_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // repeated string response = 2;
  for (int i = 0; i < this->response_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->response(i).data(), this->response(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->response(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* html_element_action_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string response = 2;
  for (int i = 0; i < this->response_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response(i).data(), this->response(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->response(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int html_element_action_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated string response = 2;
  total_size += 1 * this->response_size();
  for (int i = 0; i < this->response_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->response(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void html_element_action_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const html_element_action_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const html_element_action_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void html_element_action_response::MergeFrom(const html_element_action_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  response_.MergeFrom(from.response_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void html_element_action_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void html_element_action_response::CopyFrom(const html_element_action_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool html_element_action_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void html_element_action_response::Swap(html_element_action_response* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    response_.Swap(&other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata html_element_action_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = html_element_action_response_descriptor_;
  metadata.reflection = html_element_action_response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int html_element_action_request::kRequestFieldNumber;
#endif  // !_MSC_VER

html_element_action_request::html_element_action_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void html_element_action_request::InitAsDefaultInstance() {
}

html_element_action_request::html_element_action_request(const html_element_action_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void html_element_action_request::SharedCtor() {
  _cached_size_ = 0;
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

html_element_action_request::~html_element_action_request() {
  SharedDtor();
}

void html_element_action_request::SharedDtor() {
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    delete request_;
  }
  if (this != default_instance_) {
  }
}

void html_element_action_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* html_element_action_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return html_element_action_request_descriptor_;
}

const html_element_action_request& html_element_action_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fscramble_2eproto();
  return *default_instance_;
}

html_element_action_request* html_element_action_request::default_instance_ = NULL;

html_element_action_request* html_element_action_request::New() const {
  return new html_element_action_request;
}

void html_element_action_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::kEmptyString) {
        request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool html_element_action_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request().data(), this->request().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void html_element_action_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* html_element_action_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int html_element_action_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void html_element_action_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const html_element_action_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const html_element_action_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void html_element_action_request::MergeFrom(const html_element_action_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void html_element_action_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void html_element_action_request::CopyFrom(const html_element_action_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool html_element_action_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void html_element_action_request::Swap(html_element_action_request* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata html_element_action_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = html_element_action_request_descriptor_;
  metadata.reflection = html_element_action_request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_scrabmle

// @@protoc_insertion_point(global_scope)
